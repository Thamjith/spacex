{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Loader.js","components/Launches.js","components/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","Loader","Spinner","animation","role","style","width","height","margin","display","LAUNCHES_RATES","gql","Launches","useQuery","loading","error","data","launches","map","Launch","match","params","parseInt","variables","console","log","message","launch_year","rocket","rocket_id","rocket_name","rocket_type","App","src","logo","alt","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.489d46a2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.91169fa6.png\";","import React from 'react'\nimport classNames from 'classnames'\nimport Moment from 'react-moment'\nimport { Link } from 'react-router-dom'\n\nconst LaunchItem = ({launch: { flight_number, mission_name, launch_date_local, launch_success }}) => {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission: <span className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                    })}>{ mission_name }</span></h4>\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LaunchItem\n","import React from 'react'\n\nconst MissionKey = () => {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n            </p>\n        </div>\n    )\n}\n\nexport default MissionKey\n","import React from 'react'\nimport { Spinner } from 'react-bootstrap'\n\nconst Loader = () => {\n  return (\n    <Spinner\n      animation='border'\n      role='status'\n      style={{\n        width: '100px',\n        height: '100px',\n        margin: 'auto',\n        display: 'block',\n      }}\n    >\n      <span className='sr-only'>Loading...</span>\n    </Spinner>\n  )\n}\n\nexport default Loader\n","import React from 'react'\nimport { useQuery, gql } from '@apollo/client';\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\nimport Loader from '../components/Loader'\n\nconst LAUNCHES_RATES = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nconst Launches = () => {\n\n    const { loading, error, data } = useQuery(LAUNCHES_RATES);\n\n    return(\n        <>\n            <MissionKey />\n            { loading ? <Loader /> : error ? \"ERROR\" : \n                data.launches.map((launch) => (\n                    <LaunchItem key={launch.flight_number} launch={launch} />\n                ))\n            }\n        </>\n    )\n}\n\nexport default Launches","import React from 'react'\nimport { useQuery, gql } from '@apollo/client';\nimport { Link } from 'react-router-dom'\nimport classNames from 'classnames'\nimport Loader from '../components/Loader'\n\nconst LAUNCHES_RATES = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket{\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nconst Launch = ({ match }) => {\n\n    let flight_number = match.params.flight_number\n    flight_number = parseInt(flight_number);\n\n    const { loading, error, data } = useQuery(LAUNCHES_RATES, {\n        variables: { flight_number },\n    });\n\n    if (loading) return <h4>Loading...</h4>;\n    if (error) console.log(error);\n\n    return (\n        <>\n            { loading ? \"Loading\" : error ? console.log('error -> ', error.message) : \n            \n                <>\n                    <h1 className=\"display-4 my-3\">\n                    <span className=\"text-dark\">Mission:</span> {data.launch.mission_name}\n                    </h1>\n                    <h4 className=\"mb-3\">Launch Details</h4>\n                    <ul className=\"list-group\">\n                        <li className=\"list-group-item\">\n                            Flight Number: {flight_number}\n                        </li>\n                        <li className=\"list-group-item\">\n                            Launch Year: {data.launch.launch_year}\n                        </li>\n                        <li className=\"list-group-item\">\n                            Launch Successful:{' '}\n                            <span\n                            className={classNames({\n                                'text-success': data.launch.launch_success,\n                                'text-danger': !data.launch.launch_success\n                            })}\n                            >\n                            {data.launch.launch_success ? 'Yes' : 'No'}\n                            </span>\n                        </li>\n                    </ul>\n\n                    <h4 className=\"my-3\">Rocket Details</h4>\n                    <ul className=\"list-group\">\n                        <li className=\"list-group-item\">Rocket ID: {data.launch.rocket.rocket_id}</li>\n                        <li className=\"list-group-item\">\n                            Rocket Name: {data.launch.rocket.rocket_name}\n                        </li>\n                        <li className=\"list-group-item\">\n                            Rocket Type: {data.launch.rocket.rocket_type}\n                        </li>\n                    </ul>\n                    <hr />\n                    <Link to=\"/\" className=\"btn btn-secondary\">\n                        Back\n                    </Link>\n                </>\n            }\n        </>\n    )\n}\n\nexport default Launch\n","import { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport logo from './logo.png';\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n        <img src={logo} alt=\"spaceX\" style={{ width:300, display: 'block', margin: 'auto' }}></img>\n        <Route exact path=\"/\" component={Launches} />\n        <Route exact path=\"/launch/:flight_number\" component={Launch} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}